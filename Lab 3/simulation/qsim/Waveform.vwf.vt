// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2024 18:21:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab3_vlg_sample_tst(
	inputD0,
	inputD1,
	inputD2,
	inputD3,
	sampler_tx
);
input  inputD0;
input  inputD1;
input  inputD2;
input  inputD3;
output sampler_tx;

reg sample;
time current_time;
always @(inputD0 or inputD1 or inputD2 or inputD3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab3_vlg_check_tst (
	outputSa,
	outputSb,
	outputSc,
	outputSd,
	outputSe,
	outputSf,
	outputSg,
	sampler_rx
);
input  outputSa;
input  outputSb;
input  outputSc;
input  outputSd;
input  outputSe;
input  outputSf;
input  outputSg;
input sampler_rx;

reg  outputSa_expected;
reg  outputSb_expected;
reg  outputSc_expected;
reg  outputSd_expected;
reg  outputSe_expected;
reg  outputSf_expected;
reg  outputSg_expected;

reg  outputSa_prev;
reg  outputSb_prev;
reg  outputSc_prev;
reg  outputSd_prev;
reg  outputSe_prev;
reg  outputSf_prev;
reg  outputSg_prev;

reg  outputSa_expected_prev;
reg  outputSb_expected_prev;
reg  outputSc_expected_prev;
reg  outputSd_expected_prev;
reg  outputSe_expected_prev;
reg  outputSf_expected_prev;
reg  outputSg_expected_prev;

reg  last_outputSa_exp;
reg  last_outputSb_exp;
reg  last_outputSc_exp;
reg  last_outputSd_exp;
reg  last_outputSe_exp;
reg  last_outputSf_exp;
reg  last_outputSg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	outputSa_prev = outputSa;
	outputSb_prev = outputSb;
	outputSc_prev = outputSc;
	outputSd_prev = outputSd;
	outputSe_prev = outputSe;
	outputSf_prev = outputSf;
	outputSg_prev = outputSg;
end

// update expected /o prevs

always @(trigger)
begin
	outputSa_expected_prev = outputSa_expected;
	outputSb_expected_prev = outputSb_expected;
	outputSc_expected_prev = outputSc_expected;
	outputSd_expected_prev = outputSd_expected;
	outputSe_expected_prev = outputSe_expected;
	outputSf_expected_prev = outputSf_expected;
	outputSg_expected_prev = outputSg_expected;
end



// expected outputSa
initial
begin
	outputSa_expected = 1'bX;
end 

// expected outputSb
initial
begin
	outputSb_expected = 1'bX;
end 

// expected outputSc
initial
begin
	outputSc_expected = 1'bX;
end 

// expected outputSd
initial
begin
	outputSd_expected = 1'bX;
end 

// expected outputSe
initial
begin
	outputSe_expected = 1'bX;
end 

// expected outputSf
initial
begin
	outputSf_expected = 1'bX;
end 

// expected outputSg
initial
begin
	outputSg_expected = 1'bX;
end 
// generate trigger
always @(outputSa_expected or outputSa or outputSb_expected or outputSb or outputSc_expected or outputSc or outputSd_expected or outputSd or outputSe_expected or outputSe or outputSf_expected or outputSf or outputSg_expected or outputSg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outputSa = %b | expected outputSb = %b | expected outputSc = %b | expected outputSd = %b | expected outputSe = %b | expected outputSf = %b | expected outputSg = %b | ",outputSa_expected_prev,outputSb_expected_prev,outputSc_expected_prev,outputSd_expected_prev,outputSe_expected_prev,outputSf_expected_prev,outputSg_expected_prev);
	$display("| real outputSa = %b | real outputSb = %b | real outputSc = %b | real outputSd = %b | real outputSe = %b | real outputSf = %b | real outputSg = %b | ",outputSa_prev,outputSb_prev,outputSc_prev,outputSd_prev,outputSe_prev,outputSf_prev,outputSg_prev);
`endif
	if (
		( outputSa_expected_prev !== 1'bx ) && ( outputSa_prev !== outputSa_expected_prev )
		&& ((outputSa_expected_prev !== last_outputSa_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSa_expected_prev);
		$display ("     Real value = %b", outputSa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputSa_exp = outputSa_expected_prev;
	end
	if (
		( outputSb_expected_prev !== 1'bx ) && ( outputSb_prev !== outputSb_expected_prev )
		&& ((outputSb_expected_prev !== last_outputSb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSb_expected_prev);
		$display ("     Real value = %b", outputSb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputSb_exp = outputSb_expected_prev;
	end
	if (
		( outputSc_expected_prev !== 1'bx ) && ( outputSc_prev !== outputSc_expected_prev )
		&& ((outputSc_expected_prev !== last_outputSc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSc_expected_prev);
		$display ("     Real value = %b", outputSc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputSc_exp = outputSc_expected_prev;
	end
	if (
		( outputSd_expected_prev !== 1'bx ) && ( outputSd_prev !== outputSd_expected_prev )
		&& ((outputSd_expected_prev !== last_outputSd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSd_expected_prev);
		$display ("     Real value = %b", outputSd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputSd_exp = outputSd_expected_prev;
	end
	if (
		( outputSe_expected_prev !== 1'bx ) && ( outputSe_prev !== outputSe_expected_prev )
		&& ((outputSe_expected_prev !== last_outputSe_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSe_expected_prev);
		$display ("     Real value = %b", outputSe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputSe_exp = outputSe_expected_prev;
	end
	if (
		( outputSf_expected_prev !== 1'bx ) && ( outputSf_prev !== outputSf_expected_prev )
		&& ((outputSf_expected_prev !== last_outputSf_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSf_expected_prev);
		$display ("     Real value = %b", outputSf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputSf_exp = outputSf_expected_prev;
	end
	if (
		( outputSg_expected_prev !== 1'bx ) && ( outputSg_prev !== outputSg_expected_prev )
		&& ((outputSg_expected_prev !== last_outputSg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSg_expected_prev);
		$display ("     Real value = %b", outputSg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outputSg_exp = outputSg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg inputD0;
reg inputD1;
reg inputD2;
reg inputD3;
// wires                                               
wire outputSa;
wire outputSb;
wire outputSc;
wire outputSd;
wire outputSe;
wire outputSf;
wire outputSg;

wire sampler;                             

// assign statements (if any)                          
Lab3 i1 (
// port map - connection between master ports and signals/registers   
	.inputD0(inputD0),
	.inputD1(inputD1),
	.inputD2(inputD2),
	.inputD3(inputD3),
	.outputSa(outputSa),
	.outputSb(outputSb),
	.outputSc(outputSc),
	.outputSd(outputSd),
	.outputSe(outputSe),
	.outputSf(outputSf),
	.outputSg(outputSg)
);

// inputD0
initial
begin
	repeat(12)
	begin
		inputD0 = 1'b0;
		inputD0 = #40000 1'b1;
		# 40000;
	end
	inputD0 = 1'b0;
end 

// inputD1
always
begin
	inputD1 = 1'b0;
	inputD1 = #20000 1'b1;
	#20000;
end 

// inputD2
always
begin
	inputD2 = 1'b0;
	inputD2 = #10000 1'b1;
	#10000;
end 

// inputD3
always
begin
	inputD3 = 1'b0;
	inputD3 = #5000 1'b1;
	#5000;
end 

Lab3_vlg_sample_tst tb_sample (
	.inputD0(inputD0),
	.inputD1(inputD1),
	.inputD2(inputD2),
	.inputD3(inputD3),
	.sampler_tx(sampler)
);

Lab3_vlg_check_tst tb_out(
	.outputSa(outputSa),
	.outputSb(outputSb),
	.outputSc(outputSc),
	.outputSd(outputSd),
	.outputSe(outputSe),
	.outputSf(outputSf),
	.outputSg(outputSg),
	.sampler_rx(sampler)
);
endmodule

